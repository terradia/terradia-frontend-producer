# This file was generated based on ".graphqlconfig". Do not edit manually.

schema {
    query: Query
    mutation: Mutation
    subscription: Subscription
}

type Category {
    id: String!
    name: String!
    parentCategoryId: String
    products: [Product]
}

type Company {
    averageMark: Float
    cover: String
    createdAt: Date
    description: String
    email: String
    id: ID!
    logo: String
    name: String!
    numberOfMarks: Int
    phone: String
    products: [Product]
<<<<<<< HEAD
    productsCategories: [CompanyProductsCategory]
    reviews: [CompanyReview]
    updatedAt: Date
    users: [CompanyUser]
}

type CompanyProductsCategory {
    company: Company!
    id: ID!
    name: String!
    products: [Product]!
=======
    reviews: [CompanyReview]
    updatedAt: Date
    users: [User]
>>>>>>> login
}

type CompanyReview {
    company: Company
    customer: Customer
    customerMark: Int!
    description: String
    id: String!
    title: String!
}

<<<<<<< HEAD
type CompanyUser {
    company: Company
    id: String!
    roles: [Role]
    user: User
}

=======
>>>>>>> login
type Customer {
    companyReviews: [CompanyReview]
    favoriteCompanies: [Company]
    id: String!
    user: User!
}

type Mutation {
    _: Boolean
    addCategoryToProduct(categoryName: String!, productId: String!): Product!
    addFavoriteCompany(companyId: String!): Customer
<<<<<<< HEAD
    addProductToCompanyCategory(categoryId: String!, productId: String!): Product
    addUserCompanyRole(companyUserId: String!, roleId: String!): CompanyUser!
    createCategory(name: String!, parentCategoryId: String): Category!
    createCompany(description: String, email: String, name: String!, phone: String): Company!
    createCompanyProductsCategory(companyId: String!, name: String!): CompanyProductsCategory
=======
    createCategory(name: String!, parentCategoryId: String): Category!
    createCompany(description: String, email: String, name: String!, phone: String): Company!
>>>>>>> login
    createCompanyReview(companyId: String, customerMark: Int, description: String, title: String): CompanyReview
    createProduct(description: String!, name: String!): Product!
    defineUserAsCustomer(userId: String!): Customer
    deleteCategory(id: String!): Category!
<<<<<<< HEAD
    joinCompany(companyId: String!, userId: String!): Company!
    leaveCompany(companyId: String!, userId: String!): Company!
    login(email: String!, password: String!): SigninAnswer!
    register(email: String!, firstName: String!, lastName: String!, password: String!, phone: String): SignupAnswer!
    removeCompanyProductsCategory(categoryId: String!): CompanyProductsCategory
    removeFavoriteCompany(companyId: String!): Customer
    removeProductFromCompanyCategory(productId: String!): Product
    removeUserCompanyRole(companyUserId: String!, roleId: String!): CompanyUser!
=======
    login(email: String!, password: String!): SigninAnswer!
    register(email: String!, firstName: String!, lastName: String!, password: String!, phone: String): SignupAnswer!
    removeFavoriteCompany(companyId: String!): Customer
>>>>>>> login
}

type Product {
    categories: [Category]
    company: Company
<<<<<<< HEAD
    companyProductsCategory: CompanyProductsCategory
=======
>>>>>>> login
    createdAt: Date
    description: String!
    id: ID!
    image: String
    name: String!
    productReviews: [CompanyReview]
    updatedAt: Date
}

type Query {
    _: Boolean
    getAllCategories: [Category]!
    getAllCompanies(page: Int, pageSize: Int): [Company]
<<<<<<< HEAD
    getAllCompanyProductsCategories(companyId: String!): [CompanyProductsCategory]
    getAllCustomers: [Customer]
    getAllProducts: [Product]!
    getCategoryByName(name: String!): Category
    getCompany(companyId: ID!): Company
    getCompanyByName(name: String!): Company
    getCompanyProductsCategory(categoryId: String, companyId: String!, name: String): CompanyProductsCategory
=======
    getAllCustomers: [Customer]
    getAllProducts: [Product]!
    getCategoryByName(name: String!): Category
    getCompany(id: ID!): Company
    getCompanyByName(name: String!): Company
>>>>>>> login
    getCustomer(userId: String!): Customer
    getCustomerFavoriteCompanies(userId: String): [Company]
    getProduct(id: ID!): Product!
    getProductsByCompany(companyId: String): [Product]!
    getProductsByCompanyByCategory(companyId: String): [Category]!
    getUser: User
}

<<<<<<< HEAD
type Role {
    id: String!
    slugName: String
    translationKey: String
    userPermission: UserPermissions
}

=======
>>>>>>> login
type SigninAnswer {
    token: String!
    userId: String!
}

type SignupAnswer {
    message: String!
    token: String!
    userId: String!
}

type Subscription {
    _: Boolean
}

type User {
<<<<<<< HEAD
    companies: [CompanyUser]
=======
    company: Company
>>>>>>> login
    customer: Customer
    email: String!
    firstName: String!
    id: ID!
    lastName: String!
    password: String!
    phone: String!
    validated: Boolean
}

<<<<<<< HEAD
type UserPermissions {
    createCompany: Boolean
    id: String!
}

=======
>>>>>>> login
enum CacheControlScope {
    PRIVATE
    PUBLIC
}


scalar Date

"The `Upload` scalar type represents a file upload."
scalar Upload